openapi: 3.0.1
info:
  title: Deno IDAM API
  description: "This is a generic identity management service API. AWS Cognito intergrations"
  version: 0.0.1-oas3
tags:
  - name: "meta"
    description: "Application health checks and meta data endpoints."
  - name: "register"
    description: "Register new users"
servers:
  - url: "http://localhost:8000/api/v1"
    description: Local development server running on developer's machine.
paths:
  /ping:
    get:
      tags:
        - meta
      summary: Test that the API is running.
      description: "This endpoint is a health check to determine if the API is reachable."
      responses:
        "200":
          description: Ping success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  date:
                    type: string
                    format: string
                  status:
                    type: string
  /register:
    post:
      tags:
        - register
      summary: Registers and creates a user.
      description: "Users are registered using their email address as a unique `username`.  Note that the `username` is set to the same value as the `email`."
      requestBody:
        description: User parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully pending confirmation. 
components:
  securitySchemes:
      bearerAuth:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    User:
      type: object
      properties:
        firstname:
          type: string
        secondname:
          type: string
        email:
          type: string
        username:
          type: string
        address:
          type: string
        password:
          type: string